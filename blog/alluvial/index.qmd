---
title: "Alluvial Plots (AKA Sankey Diagrams) for Time-Varying Data"
author: "Katherine Hoffman"
date: "2023-01-02"
categories: [programming]
image: "image.png"
draft: true
description: " "
tags: 
  - rstats
  - alluvial plot
  - sankey diagrams
  - time varying data
---

```{=tex}
\usepackage{amsmath}
\DeclareMathOperator*{\argmax}{arg\,max}
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F, fig.width=8, fig.height=5)
```


> **Alluvial** plots, or **Sankey diagrams**, can be used to show the **movement of individual units across a single variable**, such as time. In this post I'll show the steps to make the below alluvial plot for a time-varying exposure and time-to-event outcome.



I've been making alluvial plots, also known as Sankey diagrams, for my research in pulmonary and critical care for a few years now. For example, in a recent manuscript, I used an alluvial plot to show:

::: {.column-margin}
![Another example of an alluvial plot I've made for a manuscript is Figure 1A of [Schenck et al. (2022)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8641830/). It shows number of patients with each Serial Organ Failure Assessment pulmonary subscore (0,1,2,3,4) using various substitution methods for missing measurements.](../../img/sofa_fig_alluvial.png)
:::

- a time-varying categorical exposure: maximum level of respiratory support
  - no supplemental oxygen
  - non-invasive supplemental oxygen
  - invasive mechanical ventilation
- a time-to event outcome: time to acute kidney injury (AKI)
- a censoring event: hospital discharge
- a competing risk: death
  
The below plot is from [Diaz et al. (2023)]() and shows the exposure and outcome statuses over 14 days of study time in a cohort of 3,000 critically ill COVID-19 patients.

![](../../img/diaz_alluvial_ex.png)

::: {.callout-note icon="false" title="What about swimmer plots?"}

Another option to show time-varying exposures is [swimmer plots](), however, the space required for these figures quickly becomes impractical as the number of individual study units grows.
:::

::: {.column-margin}
![Swimmer plot from my blog post "Swimmer Plots for multiple treatments using ggplot2."](../../img/swimmer.jpg)
:::

<!-- ::: {.column-margin} -->
<!-- ![Another example of an alluvial plot for applied research is in [Diaz et al. (2023)](). It shows the maximum level of respiratory support (no supplemental oxygen, non-invasive supplemental oxygen, and invasive mechanical ventilation) over 14 days of study time in a population of critically ill COVID-19 patients. Outcomes of interest are also shown (hospital discharge, acute kidney injury, and death).](../../img/diaz_alluvial_ex.png) -->
<!-- ::: -->

<!-- https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8641830/ -->

<!-- For example, I used them to show... -->

<!--  [`ggalluvial`](https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html#:~:text=The%20%7Bggalluvial%7D%20package%20is%20a,the%20feedback%20of%20many%20users.)  -->

In this post I'll walk through making alluvial plots with the `R` package [`{ggalluvial}`](https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html#:~:text=The%20%7Bggalluvial%7D%20package%20is%20a,the%20feedback%20of%20many%20users.) to display movement of study units in longitudinal data. The end product will show the movement of the following complexities over time in a simulated data set:

- Time-varying exposure (Treatment vs. No treatment)
- Time-to-event outcome
- Competing event
- Loss to follow up

I'll show how these plots can be organized to look similar to Kaplan Meier plots.

```{r eval=F}
library(tidyverse)
library(ggalluvial)
max_time <- 7

dat_long <- read_csv(here::here("blog/alluvial/aki_death_status.csv")) |>
  group_by(id) |>
  nest() |>
  ungroup() |>
  sample_n(1000) |>
  unnest() |>
  mutate(status = case_when(status == "Non-IMV supplemental oxygen" ~ "Treatment B",
                            status == "IMV" ~ "Treatment A",
                            status == "Deceased" ~ "Competing event",
                            status == "Discharged" ~ "Loss to follow up",
                            status == "AKI" ~ "Outcome",
                            status == "No supplemental oxygen" ~ "Treatment A")) |>
  filter(time <= max_time) |>
  mutate(status = fct_relevel(status, "Loss to follow up"))

dat_wide <-
  dat_long |>
  pivot_wider(id_cols = id, names_from = time, values_from = status, names_prefix = "time_") 


vars_to_group <- paste0("time_", 0:max_time)
type_colors <- c("#6A6599", # purple
                  "#B24745", #red
                   "#00A1D5", #bluea,
                  "#374E55", # gray
                 "#79AF97" # green
                 )


dat_alluvial <-
  dat_wide |>
  group_by_at(vars_to_group) |>
  count() |>
  to_lodes_form(key = "month", axes = 1:max_time) |>
  mutate(month = factor(parse_number(as.character(month))))

dat_alluvial |>
  ggplot(
    aes(x = month,
        stratum = stratum, 
        col = stratum,
        alluvium = alluvium,
        y=n,
        fill = stratum)
  ) +
  geom_flow() +
  geom_stratum() +
  # scale_fill_manual(values = type_colors) +
  # scale_color_manual(values = type_colors) +
  theme_classic() +
  scale_x_discrete(expand = c(0,0))+
  scale_y_continuous(expand = c(0,0)) +
  labs(x = "Study Month",
       y = "Number of Patients",
       title = "Number of Patients per Exposure-Outcome Status by Day",
       fill = "Status",
       col = "Status") +
  theme(text=element_text(family="Roboto"),
        legend.text = element_text(
          size=9))

```


```{r echo = F, fig.width=8, fig.height=5}
library(tidyverse)
library(ggalluvial)

dat_long <- read_csv(here::here("blog/alluvial/aki_death_status.csv")) |>
  group_by(id) |>
  nest() |>
  ungroup() |>
  sample_n(1000) |>
  unnest()
dat_wide <-
  dat_long |>
  pivot_wider(id_cols = id, names_from = time, values_from = status, names_prefix = "time_")

max_time <- 14
vars_to_group <- paste0("time_", 0:max_time)
type_colors <- c("#6A6599", # purple
                  "#B24745", #red
                   "#00A1D5", #bluea,
                  "#374E55", # gray
                 "#79AF97", # green
                 "#DF8F44" #orange
                 ) 

dat_alluvial <-
  dat_wide |>
  group_by_at(vars_to_group) |>
  count() |>
  to_lodes_form(key = "day", axes = 1:max_time) |>
  mutate(day = factor(parse_number(as.character(day))+1),
        stratum = fct_relevel(stratum,"Discharged",
                                      "Deceased",
                                      "AKI",
                                      "No supplemental oxygen",
                                      "Non-IMV supplemental oxygen",
                                      "IMV"))

dat_alluvial |>
  ggplot(
    aes(x = day,
        stratum = stratum, 
        col = stratum,
        alluvium = alluvium,
        y=n,
        fill = stratum)
  ) +
  geom_flow() +
  geom_stratum() +
  scale_fill_manual(values = type_colors) +
  scale_color_manual(values = type_colors) +
  theme_classic() +
  scale_x_discrete(expand = c(0,0))+
  scale_y_continuous(expand = c(0,0)) +
  labs(x = "Study Day", y = "Number of Patients", title = "Number of Patients per Exposure-Outcome Status by Day",
       fill = "Status", col = "Status") +
  theme(text=element_text(family="Times", size=11),
        legend.text = element_text(
          size=9))
```

# Step 0: Load long-form data

We'll first read in the data set from my Github. This data is in **long-form**, meaning there is one row for every patient at every time point of the study. There are 3,300 patients in this data, and there are 14 time points, so 14 * 3,300 = 49,500 rows.

```{r}
dat_long <- read_csv(here::here("blog/alluvial/aki_death_status.csv"))
dat_long
```

At each `time` point, there is a column `status` which indicates whether the patient was still in the study, and if so, what their supplemental oxygen status, where categories are: 

- `"No supplemental oxygen"`

- `"Non-IMV supplemental oxygen"`

- `"IMV"`

If they are not in the study any longer, the status indicates whether it is because they either: 

- experienced the event of interest (`"AKI"`)
- experienced a competing event, i.e. death (`"Deceased"`)
- or they were informatively right-censored (`"Discharged"`).

# Step 1: Create wide-form data

I've started with the long-form data because I think(!) it is the most common form for an analyst to start with in their time-varying exposure and/or time-to-event data analysis. However, we actually need the data to be in **wide-form** to make it compatible for plotting using the `ggalluvial` package. Wide-form data means we want one row per patient (n=3,300) and one column per time point (k=14), and the values of each cell is the patient's status at that time point.

We will use the `pivot_wider()` function for this. Here are the breakdowns of the arguments we'll use in `pivot_wider()`. For more information, type `?pivot_wider()` into your `R` console.

- `id_col = id` specifies that the `id` column uniquely identifies each observation (each patient)

- `names_from = time` means the names of the new columns for each time point will come from the current `time` column

- `names_prefix = "time_"` will relabel our new time columns to be {`time_1`, `time_2`, ..., `time_14`}

- `values_from = status` indicates we want the values in the cells of our new data frame to be the values that are currently in the `status` column of our long-form data.

```{r}
dat_wide <-
  dat_long |>
  pivot_wider(id_cols = id,
              names_from = time, 
              values_from = status,
              names_prefix = "time_")
dat_wide
```

# Step 2: Create `ggalluvial`-compatible data

The next step after you have wide form data (with a status value for every observation and time point in your plot) is to get the data wrangled into the format that `ggalluvial` can handle for plotting.

First, we need to get the number of observations (patients) which have the same "flow" or "path" across all the time points in our study. In other words, we want to know how many patients are on no supplemental oxygen for times 1-10 and are then discharged at time 11. We *also* want to know how many patients have an exposure of IMV their first day of the study, and then die the second day. There are hundreds of possible "flows" that could be observed across our different statuses and time points, and the way we get the N's for each flow that is to:

1. `group_by` all the different columns indicating statuses per time point (here it is `time_1`, `time_2`, ..., `time_14`)

2. `count()` across all those different `time_*` columns.

To implement this, I'm first going to create an objects that will make my code a bit more flexible. I'm going to create a vector denoting the `time_*` column names of my new wide-form data set. This will help me call the right variables to group very soon.

```{r}
vars_to_group <- paste0("time_", 0:max_time) 
vars_to_group
```

## Step 2a: `group_by_at`

Now, we want to first group by the columns that contain the status of each observation. For me, these are now in the vector `vars_to_group`. We will then use the dplyr function `group_by_at()` to group by **all** of those status-per-time columns. Let's look at the data after we do that. It shouldn't look any different from our `dat_wide`, except for the invisible "GROUPS:" of `time_1`, `time_2`, and so on.

```{r}
dat_wide |>
  group_by_at(vars_to_group)
```

## Step 2b: `count`

Once the data is properly grouped, `count()` will return the N's for each unique path or flow we observe in our data set.

```{r}
dat_alluvial <-  dat_wide |>
  group_by_at(vars_to_group) |>
  count() 
```
It's a bit hard to see what happened there, but a new column `n` was created with the N's in each pathway. We can see this better if we `select(n, everything())` (meaning select n, then all the other columns).

```{r}
dat_alluvial |>
  select(n, everything())
```

So, we can see that 45 patients have an exposure of Invasive Mechanical Ventilation (IMV) their index day of hospitalization, and then get Acute Kidney Injury (AKI), by their first full day of hospitalization.


## Step 2c: `ggalluvial::to_lodes_form()`

Now, we will use the `ggalluvial` package's function `to_lodes_form` to transfer all the potential paths into what is called "lodes form."

```{r}
# Titanic data in alluvia format
titanic_alluvia <- as.data.frame(Titanic)
head(titanic_alluvia)
is_alluvia_form(titanic_alluvia,
                weight = "Freq")
# Titanic data in lodes format
titanic_lodes <- to_lodes_form(titanic_alluvia,
                               key = "x", value = "stratum", id = "alluvium",
                               axes = 1:4)
head(titanic_lodes)

titanic_lodes2 <- to_lodes_form(titanic_alluvia,
                                key = variable, value = value,
                                id = cohort,
                                1:3, diffuse = Class)
head(titanic_lodes2)

```


```{r}
dat_alluvial <- 
   dat_alluvial|>
  to_lodes_form(key = "time", axes = 1:(length(vars_to_group)))
```


## Step 2d: Changes x-axis and reorder status/stratum levels

Now, we want the x-axis on our plot to show time in numbers, rather than `time_0`, `time_1`, etc., so we will use `parse_number()` to extract the number from our new column `time`.

```{r}
dat_alluvial <- 
  dat_alluvial |>
  mutate(time = factor(parse_number(as.character(time)))) # time column is a factor, so first change to character, then parse_number, then change it back to a factor
```


Lastly, we will organize the 

```{r}
dat_alluvial <- dat_alluvial |>
  mutate(stratum = fct_relevel(stratum,
                                      "No supplemental oxygen",
                                      "Non-IMV supplemental oxygen",
                                      "IMV", 
                                      "AKI",
                                      "Deceased",
                                      "Discharged"))
dat_alluvial
```

# Step 3: Set up colors

Now, we want to create a vector of colors, which I'll call `type_colors`, that follows the same order of our `stratum` factor levels we defined above.

```{r}
type_colors <- c("#374E55", # gray
                 "#79AF97", # green
                 "#DF8F44", #orange
                  "#00A1D5", #bluea,
                 "#B24745", #red
                  "#6A6599" # purple
                 ) 
```

Once our colors are defined, we will add start with a standard ggplot function and add in the relevant arguments, e.g. x axis is `time` and y axis is the counts in column `n`. The color and fill of our plot's bars will be determined by the `stratum` column. The ...... will also be determined by 

```{r}
p <- dat_alluvial |>
  ggplot(
    aes(x = time,
        stratum = stratum, 
        col = stratum,
        alluvium = alluvium,
        y=n,
        fill = stratum)
  )
p
```

Now, we will usse the function `geom_flow()` to.....??

```{r}
p <- p +
  geom_flow() 
p
```

```{r}
p <- p +
  geom_stratum() 

p
```

We can change the fill of the columns to match our selected colors.

```{r}
p <- p +
  scale_fill_manual(values = type_colors) 
p
```

We can change the outline of the columns to match our selected colors.

```{r}
p <- p +
  scale_color_manual(values = type_colors) 
p
```

We can remove extra white space with `theme_classic()`.

```{r}
p <- p +
  theme_classic() 
p
```

```{r}
p <- p +
  scale_x_discrete(expand = c(0,0))
p
```

```{r}
p <- p +
  scale_y_continuous(expand = c(0,0)) 
p
```

```{r}
p <- p +
  labs(x = "Study Day", y = "Number of Patients", title = "Number of Patients per Exposure-Outcome Status by Day",
       fill = "Status", col = "Status") 
p
```

```{r}
p <- p +
  theme(text=element_text(family="Times", size=11),
        legend.text = element_text(
          size=9))
p
```
















<!-- ## Step 0: Load the data -->

<!-- ```{r} -->
<!-- sofa_wide <- read_csv(here::here("blog/alluvial/pseudo_sofa_khstats.csv")) |> -->
<!--   mutate(across(starts_with("day"), ~factor(.x, levels=c("Deceased", 0:4,"Missing","Discharged")))) |>   filter(score_type == "pulmonary_sofa") -->
<!-- ``` -->

<!-- The data structure we will use for each alluvial plot is **wide format**, i.e. one row per unit, and one column per time period. -->

<!-- The `sofa_wide` data set shows this wide format data with one row for each of the six SOFA subscore per patient. We will subset this data for now to one subscore, the pulmonary SOFA score, and use this data to make our first plot. -->


<!-- ```{r} -->
<!-- glimpse(sofa_wide) -->
<!-- head(sofa_wide) -->
<!-- ``` -->

<!-- ## Step 2 -->

<!-- ```{r} -->
<!-- sofa_wide |> -->
<!--       group_by(day0, day1, day2, day3) |> -->
<!--     count(.drop = F)  -->
<!-- ``` -->

<!-- # Step 3 -->


<!-- ```{r} -->
<!-- sofa_wide |> -->
<!--     group_by(day0, day1, day2, day3) |> -->
<!--     count(.drop = F) |> -->
<!--     ungroup() |> -->
<!--     to_lodes_form(key = "day", axes = 1:4) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- sofa_wide |> -->

<!--     group_by(day0, day1, day2, day3) |> -->
<!--     count(.drop = F) |> -->
<!--     ungroup() |> -->
<!--     to_lodes_form(key = "day", axes = 1:4)  |> -->
<!--     mutate(day = case_when(day == "day0" ~ "B", -->
<!--                            TRUE ~ as.character(parse_number(as.character(day)))), -->
<!--            day = fct_relevel(day, "B")) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- sofa_alluv <- sofa_wide |> -->

<!--     group_by(day0, day1, day2, day3) |> -->
<!--     count(.drop = F) |> -->
<!--     ungroup() |> -->
<!--     to_lodes_form(key = "day", axes = 1:4)  |> -->
<!--     mutate(day = case_when(day == "day0" ~ "B", -->
<!--                            TRUE ~ as.character(parse_number(as.character(day)))), -->
<!--            day = fct_relevel(day, "B")) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- p <- -->
<!--   sofa_alluv |> -->
<!--     ggplot(aes(x = day, -->
<!--                y = n, -->
<!--                stratum = stratum, -->
<!--                alluvium = alluvium, -->
<!--                fill = stratum)) -->
<!-- p -->
<!-- ``` -->

<!-- ```{r} -->
<!-- p <- p + geom_flow()  -->
<!-- p -->
<!-- ``` -->

<!-- ```{r} -->
<!-- p <- p + geom_stratum()  -->
<!-- p -->
<!-- ``` -->

<!-- ```{r} -->
<!-- p <- p + theme_classic()  -->
<!-- p -->
<!-- ``` -->

<!-- ```{r} -->
<!-- p <- p + coord_cartesian(xlim = c(.5,4.5), -->
<!--                          ylim = c(0,100), -->
<!--                          expand=F)  -->
<!-- p -->
<!-- ``` -->

<!-- ```{r} -->
<!-- p <- p + -->
<!--   labs(x = "Day", -->
<!--        y = "Count", -->
<!--        fill = "Subscore",  -->
<!--        title = "Pulmonary SOFA Score by Day") -->
<!-- p -->
<!-- ``` -->

<!-- ```{r} -->
<!-- my_pal <- ggsci::pal_nejm("default", alpha = 0.6)(8) -->

<!-- p <- p +   scale_fill_manual(values = my_pal, drop=F)  -->
<!-- p -->
<!-- ``` -->



<!-- ```{r} -->
<!-- p <- sofa_wide |> -->

<!--     group_by(day0, day1, day2, day3) |> -->
<!--     count(.drop = F) |> -->
<!--     ungroup() |> -->
<!--     to_lodes_form(key = "day", axes = 1:4)  |> -->
<!--     mutate(day = case_when(day == "day0" ~ "B", -->
<!--                            TRUE ~ as.character(parse_number(as.character(day)))), -->
<!--            day = fct_relevel(day, "B")) |> -->
<!--     ggplot(aes(x = day, y = n, -->
<!--                stratum = stratum, -->
<!--                alluvium = alluvium, -->
<!--                fill = stratum)) + -->
<!--     geom_flow() + -->
<!--     geom_stratum() + -->
<!--     theme_classic() + -->
<!--     scale_x_discrete(expand = c(0.1,0.1)) + -->
<!--     scale_fill_manual(values = my_pal, drop=F) + -->
<!--     labs(x = "Day", y = "Count", -->
<!--          fill = "Subscore", title = "Pulmonary SOFA Score by Day") -->

<!-- p -->

<!-- ``` -->

