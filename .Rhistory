cd st
p
install.packages("dagR")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, results = "asis")
## load up the packages we will need:
library(tidyverse)
library(gt)
library(patchwork)
## ---------------------------
## load data
# load in results generated from Cox PH hazards models
res_log <- read_csv("model-first-results-log.csv")
res <- read_csv("model-first-results.csv")
res <- res_log |>
rename_with(~str_c("log.", .), estimate:conf.high) |>
select(-p.value) |>
full_join(res)
## plotting
## ---------------------------
# create forest plot on log scale (middle section of figure)
p_mid<-
res |>
ggplot(aes(y = model)) +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
labs(x="Log Hazard Ratio") +
theme_classic() +
scale_y_discrete() +
coord_cartesian(ylim=c(1,11), xlim=c(-1, .5))+
geom_vline(xintercept = 0, linetype="dashed") +
scale_colour_identity() +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())+
annotate("text", x = -.32, y = 11, label = "Corticosteroids protective") +
annotate("text", x = .3, y = 11, label = "Corticosteroids harmful")
# wrangle results into pre-plotting table form
res_plot <- res |>
mutate(across(c(estimate, conf.low, conf.high), ~str_pad(round(.x, 2), width=4, pad="0", side="right")),
estimate_lab = paste0(estimate, " (", conf.low, "-", conf.high,")"),
color = rep(c("gray","white"),5)) |>
mutate(p.value = case_when(p.value < .01 ~ "<0.01", TRUE ~ str_pad(as.character(round(p.value, 2)),width=4,pad="0",side="right"))) |>
bind_rows(data.frame(model = "Model", estimate_lab = "Hazard Ratio (95% CI)", conf.low = "", conf.high="",p.value="p-value")) |>
mutate(model = fct_rev(fct_relevel(model, "Model")))
# left side of plot - hazard ratios
p_left <-
res_plot  |>
ggplot(aes(y = model)) +
geom_text(aes(x=0, label=model), hjust=0, fontface = "bold") +
geom_text(aes(x=1, label=estimate_lab), hjust=0, fontface = ifelse(res_plot$estimate_lab == "Hazard Ratio (95% CI)", "bold", "plain")) +
theme_void() +
coord_cartesian(xlim=c(0,4))
# right side of plot - pvalues
p_right <-
res_plot  |>
ggplot() +
geom_text(aes(x=0, y=model, label=p.value), hjust=0, fontface = ifelse(res_plot$p.value == "p-value", "bold", "plain")) +
theme_void()
# layout design (top, left, bottom, right)
layout <- c(
area(t = 0, l = 0, b = 30, r = 3),
area(t = 1, l = 4, b = 30, r = 9),
area(t = 0, l = 9, b = 30, r = 11)
)
# final plot arrangement
p_left + p_mid + p_right + plot_layout(design = layout)
## save final figure
#ggsave("/img/forest-plots/forest-plot.png", width=9, height=4)
library(tidyverse)
library(gt)
# Importres
glimpse(res)
res |>
ggplot(aes(y = model)) +
theme_classic()
res |>
ggplot(aes(y = model))  +
theme_classic() +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high))
res |>
ggplot(aes(y = model)) +
theme_classic() +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
geom_vline(xintercept = 0, linetype="dashed") +
labs(x="Log Hazard Ratio", y="")
res |>
ggplot(aes(y = model)) +
theme_classic() +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
labs(x="Log Hazard Ratio", y="") +
geom_vline(xintercept = 0, linetype="dashed") +
coord_cartesian(ylim=c(1,11), xlim=c(-1, .5))
res |>
ggplot(aes(y = model)) +
theme_classic() +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
labs(x="Log Hazard Ratio") +
geom_vline(xintercept = 0, linetype="dashed") +
coord_cartesian(ylim=c(1,11), xlim=c(-1, .5)) +
annotate("text", x = -.32, y = 11, label = "Corticosteroids protective") +
annotate("text", x = .3, y = 11, label = "Corticosteroids harmful")
p_mid <-
res |>
ggplot(aes(y = fct_reverse(model))) +
theme_classic() +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
labs(x="Log Hazard Ratio") +
geom_vline(xintercept = 0, linetype="dashed") +
coord_cartesian(ylim=c(1,11), xlim=c(-1, .5)) +
annotate("text", x = -.32, y = 11, label = "Corticosteroids protective") +
annotate("text", x = .3, y = 11, label = "Corticosteroids harmful") +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())
p_mid
p_mid <-
res |>
ggplot(aes(y = fct_rev(model))) +
theme_classic() +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
labs(x="Log Hazard Ratio") +
geom_vline(xintercept = 0, linetype="dashed") +
coord_cartesian(ylim=c(1,11), xlim=c(-1, .5)) +
annotate("text", x = -.32, y = 11, label = "Corticosteroids protective") +
annotate("text", x = .3, y = 11, label = "Corticosteroids harmful") +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())
p_mid
## load up the packages we will need:
library(tidyverse)
library(gt)
library(patchwork)
## ---------------------------
## load data
# load in results generated from Cox PH hazards models
res_log <- read_csv("model-first-results-log.csv")
res <- read_csv("model-first-results.csv")
res <- res_log |>
rename_with(~str_c("log.", .), estimate:conf.high) |>
select(-p.value) |>
full_join(res)
## plotting
## ---------------------------
# create forest plot on log scale (middle section of figure)
p_mid<-
res |>
ggplot(aes(y = fct_rev(model))) +
geom_point(aes(x=log.estimate), shape=15, size=3) +
geom_linerange(aes(xmin=log.conf.low, xmax=log.conf.high)) +
labs(x="Log Hazard Ratio") +
theme_classic() +
scale_y_discrete() +
coord_cartesian(ylim=c(1,11), xlim=c(-1, .5))+
geom_vline(xintercept = 0, linetype="dashed") +
scale_colour_identity() +
theme(axis.line.y = element_blank(),
axis.ticks.y= element_blank(),
axis.text.y= element_blank(),
axis.title.y= element_blank())+
annotate("text", x = -.32, y = 11, label = "Corticosteroids protective") +
annotate("text", x = .3, y = 11, label = "Corticosteroids harmful")
# wrangle results into pre-plotting table form
res_plot <- res |>
mutate(across(c(estimate, conf.low, conf.high), ~str_pad(round(.x, 2), width=4, pad="0", side="right")),
estimate_lab = paste0(estimate, " (", conf.low, "-", conf.high,")"),
color = rep(c("gray","white"),5)) |>
mutate(p.value = case_when(p.value < .01 ~ "<0.01", TRUE ~ str_pad(as.character(round(p.value, 2)),width=4,pad="0",side="right"))) |>
bind_rows(data.frame(model = "Model", estimate_lab = "Hazard Ratio (95% CI)", conf.low = "", conf.high="",p.value="p-value")) |>
mutate(model = fct_rev(fct_relevel(model, "Model")))
# left side of plot - hazard ratios
p_left <-
res_plot  |>
ggplot(aes(y = model)) +
geom_text(aes(x=0, label=model), hjust=0, fontface = "bold") +
geom_text(aes(x=1, label=estimate_lab), hjust=0, fontface = ifelse(res_plot$estimate_lab == "Hazard Ratio (95% CI)", "bold", "plain")) +
theme_void() +
coord_cartesian(xlim=c(0,4))
# right side of plot - pvalues
p_right <-
res_plot  |>
ggplot() +
geom_text(aes(x=0, y=model, label=p.value), hjust=0, fontface = ifelse(res_plot$p.value == "p-value", "bold", "plain")) +
theme_void()
# layout design (top, left, bottom, right)
layout <- c(
area(t = 0, l = 0, b = 30, r = 3),
area(t = 1, l = 4, b = 30, r = 9),
area(t = 0, l = 9, b = 30, r = 11)
)
# final plot arrangement
p_left + p_mid + p_right + plot_layout(design = layout)
## save final figure
#ggsave("/img/forest-plots/forest-plot.png", width=9, height=4)
p_left + p_mid + p_right + plot_layout(design = layout)
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=b8bWNkUAAAAJ&hl=en
thackl <- "73RvTUoAAAAJ"
html_1 <- get_publications(thackl)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "T Hackl", "<b>T Hackl</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table class="publication-table" border="10px solid blue" cellspacing="0" cellpadding="6" rules="", frame=""><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_2
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
writeLines(html_4, "publications.html")
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=b8bWNkUAAAAJ&hl=en
thackl <- "73RvTUoAAAAJ"
html_1 <- get_publications(thackl)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "K Hoffman", "<b>K Hoffman</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table class="publication-table" border="10px solid blue" cellspacing="0" cellpadding="6" rules="", frame=""><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
writeLines(html_4, "publications.html")
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=b8bWNkUAAAAJ&hl=en
thackl <- "73RvTUoAAAAJ"
html_1 <- get_publications(thackl)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "KL Hoffman", "<b>KL Hoffman</b>"),
author=str_replace_all(author, "K Hoffman", "<b>K Hoffman</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table class="publication-table" border="10px solid blue" cellspacing="0" cellpadding="6" rules="", frame=""><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c('publications', html_3)
html_4
html_4 <- c(
paste0('publications',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
html_4
html_4 <- c(
paste0('---
title: "Publications"
---',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
html_4
html_4[[1]]
html_4 <- c(
paste0('---
title: "Publications"
---', html_3)
html_4[[1]]
html_4
html_4 <- c(
paste0('---
title: "Publications"
---'), html_3)
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\n---'), html_3)
writeLines(html_4, "publications.qmd")
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=b8bWNkUAAAAJ&hl=en
thackl <- "73RvTUoAAAAJ"
html_1 <- get_publications(thackl)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "KL Hoffman", "<b>KL Hoffman</b>"),
author=str_replace_all(author, "K Hoffman", "<b>K Hoffman</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table class="publication-table" border="10px solid blue" cellspacing="0" cellpadding="6" rules="", frame=""><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('---\ntitle: "Publications"\n---'), html_3,
paste0('<p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'))
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\neditor: source---'), html_3,
paste0('<p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'))
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\neditor: source\n---'), html_3,
paste0('<p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'))
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\neditor: source\n---'), html_3,
paste0('\n\n<p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'))
writeLines(html_4, "publications.qmd")
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\neditor: source\n---'), html_3,
paste0('<br><br><p style="text-align: right; margin-top: -40px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'))
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\neditor: source\n---'), html_3,
paste0('<p style="text-align: left; margin-top: 20px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for details.</small></p>'))
writeLines(html_4, "publications.qmd")
html_4 <- c(
paste0('---\ntitle: "Publications"\neditor: source\n---'),
paste0('<p style="text-align: left; margin-top: 20px;"><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?hl=en&user=b8bWNkUAAAAJ">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for details.</small></p>'),
html_3)
writeLines(html_4, "publications.qmd")
quarto install extension quarto-ext/video
html_1
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=b8bWNkUAAAAJ&hl=en
thackl <- "73RvTUoAAAAJ"
html_1 <- get_publications(thackl)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "KL Hoffman", "<b>KL Hoffman</b>"),
author=str_replace_all(author, "K Hoffman", "<b>K Hoffman</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table class="publication-table" border="10px solid blue" cellspacing="0" cellpadding="6" rules="", frame=""><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_1
html1_2
html_2
?knitr::write_bib
knitr::write_bib('my_pubs.bib')
knitr::write_bib(file= 'pubs_methods.bib')
knitr::write_bib(file= 'pubs_methods.bib')
