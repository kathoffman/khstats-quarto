{
  "hash": "ab7f0c801f6a9c4b2f2f7f31efd27687",
  "result": {
    "markdown": "---\ntitle: \"How many ways are there to get a SOFA Score of 10?\"\nauthor: \"Katherine Hoffman\"\ndate: 2022-02-10\ncategories: [\"programming\"]\ndescription: \" \"\ntags: [\"critical care research\",\"sofa scores\",\"combinatorics\"]\nimage: /img/sofa/sofa-crop.png\noutput: \n  blogdown::html_page:\n    toc: false\n    smart: false\n    df_print: \"paged\"\n---\n\n\nThe **Serial Organ Failure Assessment (SOFA)** is a measure used in hospitals to define and assign **severity of illness** in acutely ill patients. The score measures general dysfunction in **six vital organ systems**: the lung, brain, heart, liver, kidney, and blood. Each of these organs receive an **integer subscore, ranging from 0 to 4**, using routinely collected labs and vital signs. The **sum of the six subscores, ranging from 0 to 24, creates a patient's SOFA score**. The higher a patient's SOFA score, the sicker they are. There are plenty of [online calculators](https://www.mdcalc.com/sequential-organ-failure-assessment-sofa-score) for SOFA scores that you can check out you're curious about exactly what goes into each of the subscores.\n\nSOFA scores are useful as a quick live-check for physicians of a patient's overall well-being, but they're moreso used extensively in critical care observational research. We use SOFA scores to adjust for severity of illness as a confounder in observational studies, and they're often used as inclusion criteria for deciding which patients are eligible for therapies in a Randomized Control Trial (RCT). There are plenty of pros and cons of SOFA, but one aspect of SOFA scores that is perhaps non-intuitive for many physicians is just how many ways there are for a patient with a drastically different clinical profile to have the same SOFA score as another patient.\n\nRecently a pulmonologist who I work closely with, [Dr. Edward Schenck](https://twitter.com/edschenck), sent me an email with the subject line \"Help!!\" I clicked on his email, and found an interesting question:\n\n> ***There is only one way for a patient to have a SOFA score of 0 (all six subscores are 0). There are six ways a patient could have a SOFA score of 6 (one of the six subscores is 1). But how many ways are there for a patient to get a SOFA score of 10?***\n\nIt was a serious question from him, but a beautiful mid-day brainteaser break for me. What *are* the number of possible combinations to get every possible SOFA score, from 0 to 24?\n\n<!-- I’ll solve this problem first using R code, then combinatorics, and finally I’ll talk about the implications this has in acute care research, including randomized clinical trials for acute-care therapies (COVID-19 included!) which use SOFA scores as an inclusion criteria. -->\n\nWe can solve this problem with only a few lines of code in `R` by using `expand.grid()` to make all the combinations of the 6 scores, which can take values `0`, `1`, `2`, `3`, or `4`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombos <- expand.grid(\"lung\" = 0:4, \"liver\" = 0:4, \"heart\" = 0:4, \"blood\" = 0:4, \"brain\" = 0:4, \"kidney\" = 0:4)\nhead(combos,n=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   lung liver heart blood brain kidney\n1     0     0     0     0     0      0\n2     1     0     0     0     0      0\n3     2     0     0     0     0      0\n4     3     0     0     0     0      0\n5     4     0     0     0     0      0\n6     0     1     0     0     0      0\n7     1     1     0     0     0      0\n8     2     1     0     0     0      0\n9     3     1     0     0     0      0\n10    4     1     0     0     0      0\n11    0     2     0     0     0      0\n12    1     2     0     0     0      0\n13    2     2     0     0     0      0\n14    3     2     0     0     0      0\n15    4     2     0     0     0      0\n16    0     3     0     0     0      0\n17    1     3     0     0     0      0\n18    2     3     0     0     0      0\n19    3     3     0     0     0      0\n20    4     3     0     0     0      0\n```\n:::\n\n```{.r .cell-code}\ncombos$total_sofa <- rowSums(combos)\nhead(combos,n=20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   lung liver heart blood brain kidney total_sofa\n1     0     0     0     0     0      0          0\n2     1     0     0     0     0      0          1\n3     2     0     0     0     0      0          2\n4     3     0     0     0     0      0          3\n5     4     0     0     0     0      0          4\n6     0     1     0     0     0      0          1\n7     1     1     0     0     0      0          2\n8     2     1     0     0     0      0          3\n9     3     1     0     0     0      0          4\n10    4     1     0     0     0      0          5\n11    0     2     0     0     0      0          2\n12    1     2     0     0     0      0          3\n13    2     2     0     0     0      0          4\n14    3     2     0     0     0      0          5\n15    4     2     0     0     0      0          6\n16    0     3     0     0     0      0          3\n17    1     3     0     0     0      0          4\n18    2     3     0     0     0      0          5\n19    3     3     0     0     0      0          6\n20    4     3     0     0     0      0          7\n```\n:::\n\n```{.r .cell-code}\nsofa_counts <- table(combos$total_sofa)\nsofa_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15 \n   1    6   21   56  126  246  426  666  951 1246 1506 1686 1751 1686 1506 1246 \n  16   17   18   19   20   21   22   23   24 \n 951  666  426  246  126   56   21    6    1 \n```\n:::\n:::\n\n\nWe can plot those numbers using `ggplot2`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ncombos %>%\n  count(total_sofa) %>%\n  ggplot(aes(total_sofa, n, label=formatC(n, format=\"d\", big.mark=\",\"))) +\n  geom_point(size=2) +\n  geom_segment(aes(x=total_sofa, xend=total_sofa, y=0, yend=n)) +\n  geom_text(nudge_y = 60) +\n  labs(x=\"Total SOFA Score\", y=\"Number of Combinations\") +\n  scale_y_continuous(expand=c(0,0), limits=c(-20,2000), labels=scales::comma_format()) +\n  scale_x_continuous(breaks = 0:24) +\n  guides(fill=F) +\n  scale_fill_gradient(low=\"navy\",high=\"firebrick2\") +\n  theme_classic() +\n  theme(axis.line = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title.x = element_blank(),\n         plot.title = element_text(hjust = 0.5,\n                                  face = \"bold\", size = 20),\n        axis.text.x = element_text(size=12, face=\"bold\", vjust=2.5)\n        ) +\n  labs(title=\"Number of subscore combinations per SOFA score\") + \n  annotate(\"segment\", x = 6, xend = 9, y = 1800, yend = 1600, colour = \"dodgerblue2\", size=2, arrow=arrow())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n<!-- ## Solving with Combinatorics  -->\n\n<!-- This problem is akin to rolling a five-sided dice six times and then summing the numbers. We can determine the probability of getting each total. This Wolfram Alpha article walks through the proof. -->\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}